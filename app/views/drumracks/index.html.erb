<% @drumracks.each do |drumrack|%>
<p><%= link_to drumrack.name, drumrack_path(drumrack)%>
</p>
<p><%= drumrack.bpm%></p>
<% end %>

<%= render 'shared/stepsequencer' %>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sequencer</title>
  <style>
    /* Styles pour le séquenceur */
    .sequencer {
      display: grid;
      grid-template-columns: repeat(8, 50px); /* 8 colonnes */
      gap: 5px;
      justify-content: center;
      margin-top: 50px;
    }
    .pad {
      width: 50px;
      height: 50px;
      background-color: #ccc;
      border: 1px solid #999;
      border-radius: 5px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
    }
    .pad.active {
      background-color: #4caf50;
      color: white;
    }
    .controls {
      text-align: center;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1 style="text-align: center;">Rhythmic Sequencer</h1>

  <div class="sequencer">
    <% # Génération des cases du séquenceur %>
    <% 8.times do |row| %>
      <% 8.times do |col| %>
        <button class="pad" data-index="<%= row * 8 + col %>"></button>
      <% end %>
    <% end %>
  </div>

  <div class="controls">
    <button id="start-btn">Start</button>
    <label>
      BPM:
      <input type="number" id="bpm-input" value="120" min="60" max="200" />
    </label>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/tone"></script>
  <script>
    // Initialisation du Player pour jouer le son
    const player = new Tone.Player("path/to/your/sound.mp3").toDestination();

    // Tableau représentant les cases sélectionnées
    const steps = new Array(64).fill(false); // 8x8 grille (64 cases)

    // Fonction pour mettre à jour la grille en fonction de l'état
    document.querySelectorAll('.pad').forEach((pad, index) => {
      pad.addEventListener('click', () => {
        steps[index] = !steps[index]; // Inverse l'état de la case
        pad.classList.toggle('active'); // Active ou désactive la classe "active"
      });
    });

    // Initialisation de la séquence
    const sequence = new Tone.Sequence((time, step) => {
      if (step) {
        player.start(time); // Joue le son si la case est activée
      }
    }, steps, "16n"); // Répète toutes les 16e de note

    // Gestion du bouton "Start"
    const startBtn = document.getElementById('start-btn');
    startBtn.addEventListener('click', async () => {
      await Tone.start(); // Nécessaire pour démarrer l'audio dans les navigateurs modernes
      if (Tone.Transport.state === "started") {
        Tone.Transport.stop();
        startBtn.textContent = "Start";
      } else {
        sequence.start(0); // Lance la séquence
        Tone.Transport.start(); // Lance le transport
        startBtn.textContent = "Stop";
      }
    });

    // Gestion du BPM
    const bpmInput = document.getElementById('bpm-input');
    bpmInput.addEventListener('input', (event) => {
      Tone.Transport.bpm.value = parseInt(event.target.value, 10); // Mets à jour le BPM
    });

    // Charger le fichier audio
    player.load().then(() => {
      console.log("Sound loaded successfully!");
    }).catch((err) => {
      console.error("Error loading sound:", err);
    });
  </script>
</body>
</html>
